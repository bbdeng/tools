一、 了解jQuery
	1. 是什么: What?
		* 一个JS函数库: write less, do more
		* 封装简化DOM操作(CRUD) / Ajax
	2. 为什么用它: why?
		* 强大选择器: 方便快速查找DOM元素
		* 隐式遍历(迭代): 一次操作多个元素
		* 读写合一: 读数据/写数据用的是一个函数
		* 链式调用: 可以通过.不断调用jQuery对象的方法
			- 原理：每一次方法执行后返回的都是一个jQuery对象，可以调用jQuery对象的方法，其实用到了JS中的原型链原理
		* 事件处理
		* DOM操作(CUD)
		* 样式操作
		* 动画
		* 浏览器兼容
	3. 如何使用: How?
		- 引入jQuery库
			* 本地引入与CDN远程引入
				远程引入网站：http://www.bootcdn.cn/
			* 测试版与生产版(压缩版)
		- 使用jQuery
			* 使用jQuery函数: $/jQuery
			* 使用jQuery对象: $xxx(执行$()得到的)

二、 jQuery的2把利器
	1. jQuery函数: $/jQuery
		- jQuery向外暴露的就是jQuery函数, 可以直接使用
			* console.log($, typeof $) //证明$是一个function
			* console.log(jQuery===$)  // true $与jQuery等同
			* console.log($ === window.$) //true  $是一个全局函数
			* console.log(typeof $()) //"object"  这个对象就是jQuery对象
		- 当成一般函数使用人: $(param)
			* param是function: 相当于window.onload = function(文档加载完成的监听)
			* param是选择器字符串: 查找所有匹配的DOM元素, 返回包含所有DOM元素的jQuery对象
			* param是DOM元素: 将DOM元素对象包装为jQuery对象返回  $(this)
			* param是标签字符串: 创建标签DOM元素对象并包装为jQuery对象返回
		- 当成对象使用: $.xxx
			* each(obj/arr, function(key, value){})
			* trim(str)
	2. jQuery对象
		- 包含所有匹配的n个DOM元素的伪数组对象
			-伪数组
				* Object对象
				* length属性
				* 数值下标属性
				* 可以对伪数组进行for循环遍历
				* 没有数组特别的方法: forEach(), push(), pop(), splice()
				自定义一个伪数组:
					var weiArr = {}
					weiArr.length = 0
					weiArr[0] = 'atguigu'
					weiArr.length = 1
					weiArr[1] = 123
					weiArr.length = 2
					console.log(weiArr.forEach, $buttons.forEach) //undefined, undefined
		- 执行$()返回的就是jQuery对象
		- 基本行为:
			* length/size(): 得到dom元素的个数
			* [index]: 得到指定下标对应的dom元素
			* each(function(index, domEle){}): 遍历所有dom元素
			* index(): 得到当前dom元素在所有兄弟中的下标

三、 选择器
	- 是什么?
		* 有特定语法规则(css选择器)的字符串
		* 用来查找某个/些DOM元素: $(selector)
	- 分类
		* 基本
			* #id		//id选择器
			* tagName/*	//标签名
			* .class		//类选择器
			* selector1,selector2,selector3: 并集
			* selector1selector2selector3:   交集
		* 层次	
			* ancestor descendant     //在给定的祖先元素下匹配所有的后代元素
			* parent>child		//在给定的父元素下匹配所有的子元素
			* prev+next		//匹配所有紧接在 prev 元素后的一个 next 元素
			* prev~siblings		//匹配 prev 元素之后的所有 siblings 元素
		* 过滤
			* 在原有匹配元素中筛选出其中一些
			* :first
			* :last
			* :eq(index)	
			* :lt		//大于和小于同时用的时候，是一层一层筛选的，不是同时进行
			* :gt
			* :odd
			* :even
			* :not(selector)
			* :hidden
			* :visible
			* [attrName]
			* [attrName=value]
		* 表单
			* :input    //匹配所有 input, textarea, select 和 button 元素
			* :text 
			* :password 
			* :radio 
			* :checkbox 
			* :submit 
			* :image 
			* :reset 
			* :button 
			* :file 
			* :hidden 
		* 表单对象属性
			* :enabled 
			* :disabled 
			* :checked 
			* :selected 

四、 工具类的方法
	1. $.each(obj,function(key,value){}): 遍历数组或对象中的数据
	2. $.trim(str): 去除字符串两边的空格
	3. $.type(obj): 得到数据的类型
	4. $.isArray(obj): 判断是否是数组
	5. $.isFunction(obj): 判断是否是函数
	6. $.parseJSON(json) : 解析json字符串转换为js对象/数组

五、 属性/文本
	- 操作标签的属性, 标签体文本
		* attr(name) / attr(name, value): 读写非布尔值的标签属性
		* prop(name) / prop(name, value): 读写布尔值的标签属性
		* removeAttr(name)/removeProp(name): 删除属性
		* addClass(classValue): 添加class
		* removeClass(classValue): 移除指定clas
		* toggleClass(classValue): 如果存在（不存在）就删除（添加）一个类。
		* val() / val(value): 读写标签的value
		* html() / html(htmlString): 读写标签体文本

六、 CSS模块
	- style样式
		* css(styleName): 根据样式名得到对应的值
		* css(styleName, value): 设置一个样式
		* css({多个样式对}): 设置多个样式
	- 位置坐标
		* offset(): 读当前元素坐标(原点是页面左上角)
		* offset({ top: 10, left: 30 }): 写当前元素坐标(原点是页面左上角)
		* position(): 读当前元素坐标(原点是父元素左上角)
		* scrollTop()/scrollLeft(): 读元素/页面的滚动条坐标
		* scrollTop(300)/scrollLeft(300): 写元素/页面的滚动条坐标
	- 尺寸
		* width(20)/height(20): width/height  //该方法也可以写
		* innerWidth()/innerHeight(): width + padding
		* outerWidth()/outerHeight(): width + padding + border
		* outerWidth(true)/outerHeight(true): width + padding + border+margin

七、 筛选模块
	- 过滤（在jQuery对象内部的元素中找出部分匹配的元素, 并封装成新的jQuery对象返回）
		* first()
		* last()
		* eq(index)
		* filter(selector): 对当前元素提要求
		* not(selector): 对当前元素提要求, 并取反
		* has(selector): 对子孙元素提要求
		* slice(start, [end])：选取一个匹配的子集，与原来的slice方法类似
		* hasClass(class) ：检查当前的元素是否含有某个特定的类，如果有，则返回true。
	- 查找（查找jQuery对象内部的元素的子孙/兄弟/父母元素, 并封装成新的jQuery对象返回）
		子
		* children(selector): 子（只包括儿子）元素
		孙
		* find(selector): 后代（包括儿子和孙子）元素
		兄弟
		* preAll(selector): 前的所有兄弟
		* prev() :取得一个包含匹配的元素集合中每一个元素紧邻的前一个同辈元素的元素集合。
		* nextAll(selector) : 后面所有的兄弟标签
		* next() :取得一个包含匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。
		* siblings(selector): 所有兄弟
		父亲
		* parent(): 父元素
		* offsetParent() :这返回父元素中第一个其position设为relative或者absolute的元素。此方法仅对可见元素有效。

八、 文档处理(CUD)模块
	- 增加
		父元素向子元素中插入
		* append() / appendTo(): 插入后部(  调用方式：前者$ul1.append("<span>用append()添加的span</span>")，后者$("<span>用appendTo()添加的span</span>").appendTo($ul1)  ) 
		* preppend() / preppendTo(): 插入前部
		兄弟元素之间插入
		* before(): 插到前面
		* after(): 插到后面
	- 替换
		* replaceWith(content)：将所有匹配的元素替换成指定的HTML或DOM元素。
		* replaceAll(selector)：用匹配的元素替换掉所有 selector匹配到的元素。
		区别也是调用方式不同，前者是先找到对应jQ对象然后在调用（加入内容），后者是先找好内容，然后在把内容jQ对象替换到选择器匹配的地方
	- 删除
		* remove([expr]): 将自己及内部的孩子都删除
		* empty(): 掏空(自己还在)
		区别empty()不能传参，里面所有清空。remove可以传入参数进一步选择
	- 包裹
		* wrap(html|ele):例子$("p").wrap("<div class='wrap'></div>");将选中的p标签用div进行包裹
		* unwrap():例子$("p").unwrap();去除父元素div的包裹
	- 复制
		clone([true,true]):克隆匹配的DOM元素并且选中这些克隆的副本。
		例子：$("b").clone().prependTo("p"); 先克隆文本中的b在把其添加到p中最前面
		1:一个布尔值（true 或者 false）指示事件处理函数是否会被复制。
		2:一个布尔值，指示是否对事件处理程序和克隆的元素的所有子元素的数据应该被复制。

九、 事件模块
	- 绑定事件
		* eventName(function(){})
			常用:
			鼠标
			* click 单击,dbclick双击 ,mousedown左键按下 , mouseup左键抬起
			* mouseenter/mouseleave   mouseover/mouseout    移入/移除，区别在于后者在移入子元素时也会触发 
			* hover()使用的就是mouseenter()和mouseleave()
			* focus/blur: focus事件会在元素获得焦点的时候触发/blur事件会在元素失去焦点的时候触发
		* on('eventName',[,selector] function(){}) 
			* 可以用于事件委托，当第2个参数[,selector]可以加入子元素选择器进行赛选绑定事件委托元素。
		* off(events,[selector],[fn])
			* 移除用目标元素on绑定的事件处理程序
		* bind(type,fn) 
			* 为每个匹配元素的特定事件绑定事件处理函数，可同时绑定多个事件，一般都是绑定自定义事件
		* one(type,fn) 
			* 为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。
		* trigger()
			* 触发有bind定义的事件(通常是自定义事件) 触发条件基本都是页面加载的时候触发
		* unbind() 
			* bind的反向操作，删除匹配元素所绑定的bind事件。


	- 解绑事件
		* off('eventName')
	- 事件坐标
		* event.offsetX: 原点是当前元素左上角
		* event.clientX: 原点是窗口左上角
		* event.pageX: 原点是页面左上角
	- 事件相关
		* 停止事件冒泡: event.stopPropagation()
		* 阻止事件的默认行为: event.preventDefault() 
			* 但是IE8不支持event.preventDefault();这个玩意，如果直接调用会报错
    			* event.preventDefault && event.preventDefault();
    	- 事件委托
		- 理解
			* 将子元素的事件委托给父辈元素处理
			* 事件监听绑定在父元素上, 但事件发生在子元素上
			* 事件会冒泡到父元素
			* 但最终调用的事件回调函数的是子元素: event.target
		- 好处
			* 新增的元素没有事件监听
			* 减少监听的数量(n==>1)
		- 编码
			* delegate(selector, 'eventName', function(event){}) // 回调函数中的this是子元素
			* undelegate('eventName')

十、 动画效果
	- 在一定的时间内, 不断改变元素样式
	- 淡入淡出(opacity)
		* fadeIn([speed],[fun]): 带动画的显示
		* fadeOut([speed],[fun]): 带动画隐藏
		* fadeToggle([speed],[fun]): 带动画切换显示/隐藏
	- 滑动动画(height)
		* slideDown([speed],[fun]): 带动画的展开
		* slideUp([speed],[fun]): 带动画的收缩
		* slideToggle([speed],[fun]): 带动画的切换展开/收缩
	- 显示隐藏，默认没有动画(opacity/height/width)
		* show([speed],[fun]): (不)带动画的显示
		* hide([speed],[fun]): (不)带动画的隐藏
		* toggle([speed],[fun]): (不)带动画的切换显示/隐藏
	- 自定义动画
		* animate({left:100},[speed],[fun]): 自定义动画效果的动画
		* stop(): 停止动画

十一、 多库共存
	* 如果有2个库都有$, 就存在冲突
	* jQuery.noConflict() ：释放$的使用权, 让另一个库可以正常使用, 此时jQuery库只能使用jQuery了

十二、 window.onload与 $(document).ready()
	- window.onload
		* 包括页面的图片加载完后才会回调(晚)
		* 只能有一个监听回调
	- $(document).ready()
		* 等同于: $(function(){})
		* 页面加载完就回调(早)
		* 可以有多个监听回调

十三、 插件机制
	- 扩展jQuery函数对象的方法
		$.extend({
			xxx: fuction () {} // this是$
		})
		$.xxx()
	- 扩展jQuery对象的方法
		$.fn.extend({
			xxx: function(){}  // this是jQuery对象
		})
		$obj.xxx()

十四、 AJAX
	 $.ajax({
	        *url:"data.txt",(默认: 当前页地址) 发送请求的地址。
		cache:(默认: true,dataType为script和jsonp时默认为false),get请求时设置为 false 将不缓存此页面。
		*type:"get",(默认: "GET") 请求方式 ("POST" 或 "GET")， 默认为 "GET"。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。
		*dataType:"json",预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，比如XML MIME类型就被识别为XML。
		*data:null,发送到服务器的数据。将自动转换为请求字符串格式。必须为 Key/Value 格式。
		async:true,(默认: true) 默认设置下，所有请求均为异步请求。
		*success:function(data){},请求成功后的回调函数。
		timeout:3000,设置请求超时时间（毫秒）。此设置将覆盖全局设置。一般设置3000ms如果到时候还没请求回来直接进入error
		error:function(){};
	 })

	 JSONP 都是GET和异步请求的，不存在其他的请求方式和同步请求,而且jquery默认会给jsonp请求清除缓存
	$.ajax({
	        *url:"http://matchweb.sports.qq.com/kbs/calendar?columnID=100000",(默认: 当前页地址) 发送请求的地址。
		*dataType:"jsonp",将dataType改成jsonp就可以了
		jsonpCallback:"fn",自定义传递给服务器的函数名，而不是使用jquery自动生成的
		jsonp:"cb",把传递函数名的那个形参callback变成cb
		success:function(data){},请求成功后的回调函数。
	 })



			





















		