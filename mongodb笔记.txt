MongoDB
	- MongoDB是一个NoSQL的数据库
	- MongoDB是一款文档型数据库
	- 数据库指的就是一个存储数据的仓库
		数据库可以使我们完成对数据的持久化的操作
	- MongoDB数据库中存储的数据的基本单位就是文档，
		MongoDB中存储的就是文档，所谓文档其实就是一个“JSON”
	- MongoDB中的“JSON”我们称为BSON，比普通的JSON的功能要更加的强大,二进制存储，可以存放图片。
	- MongoDB数据库使用的是JavaScript进行操作的，在MongoDB含有一个对ES标准实现的引擎，
		在MongoDB中所有ES中的语法中都可以使用
		
	- MongoDB的基本的指令
		- 启动服务器
			mongod --dbpath 路径 --port 端口号(27017)
			
		- 启动客户端
			mongo  连接本机 
			mongo --host 127.0.0.1  注:--host后的值表示服务器的IP地址
		- 退出数据库连接
			exit
		
	- MongoDB的CRUD的操作			
		- 基本操作
			use 数据库
				- 进入指定的数据库
			show dbs
				- 显示所有的数据库
			show collections
				- 显示数据库中所有的集合
			db
				- 显示当前所在的数据库
			db.createCollection('name')  创建一个空的名称叫name的集合
		- 操作集合的方法帮助
			- db.worker.help()
		- 向数据库中插入文档
			- db.collection.insert()
				- insert()可以向集合中插入一个或多个文档
			- db.collection.insertOne()
				- 向集合中插入一个文档
			- db.collection.insertMany()
				- 向集合中插入多个文档
				
		- 查询数据库中的文档
			- db.collection.find(<query>,<keyname:1,_id=0>)
				- 可以根据指定条件从集合中查询所有符合条件的文档
				- 返回的是一个数组
				- 第1个参数query为查询的条件 可选 如果不写则表示查询所有
				- 第2个参数表示显示的内容,属性名为1表示显示，0表示不显示
			- db.collection.findOne()
				- 查询第一个符合条件的文档
				- 返回的是一个对象
			- db.collection.find().count()
				- 查询符合条件的文档的数量
				
		- 修改数据库中的文档
			- db.collection.update({旧信息}，{$unset:{新信息}})
			- db.collection.update({query}，{$unset:{update}},{option})
				- 可以修改、替换集合中的一个或多个文档
				- query update的查询条件
				- update 需要更新的对象，$unset一些更新的操作符,$inc累加
				- option
					* upsert:<boolean> 可选，如果不存在，true插入新的,默认false不插入
					* multi:<boolean> 可选，默认false,只更新找到的第1条数据，如果为true，就把按条件查出来的多条记录全部更新。
					* writeConcern:<document> 可选，抛出异常的级别
			- db.collection.updateOne()
				- 修改集合中的一个文档
			- db.collection.updateMany()
				- 修改集合中的多个文档
			- db.collection.replaceOne()
				- 替换集合中的一个文档
				
		- 删除集合中的文档
			- db.collection.remove(<query>,<option>)
				- 删除集合中的一个或多个文档（默认删除多个）
				- query 可选 ，删除的文档条件
				- option 
					* justOne:<boolean>  可选 如果设置为true或者1，则值删除一个文档
					* writeConcern:<document> 抛出异常的级别
			- db.collection.deleteOne()
				- 删除集合中的一个文档
			- db.collection.deleteMany()
				- 删除集合中的多个文档
			- 清空一个集合
				db.collection.remove({})
			- 删除一个集合
				db.collection.drop()
			- 删除一个数据库
				db.dropDatabase()
			
		//查询文档时，默认情况是按照_id的值进行排列（升序）
		//sort()可以用来指定文档的排序的规则,sort()需要传递一个对象来指定排序规则 1表示升序 -1表示降序
		//limit skip sort 可以以任意的顺序进行调用
		db.emp.find({}).sort({sal:1,empno:-1});

		//在查询时，可以在第二个参数的位置来设置查询结果的 投影
		db.emp.find({},{ename:1 , _id:0 , sal:1});

		查询条件操作符
		等于       {keyname:value}
		小于       {keyname:{$lt:value}}
		小于等于   {keyname:{$lte:value}}
		大于	   {keyname:{$gt:value}}
		大于等于   {keyname:{$gte:value}}
		不等于	   {keyname:{$ne:value}}
		大于等于30小于等于40 {keyname:{$gte:30,$lte:40}}
		用ID查询   {"_id":ObjectId("value")}	
		正则表达式 {keyname:/value/}	
		and	   传入多个建key时，每个建用逗号隔开
		or	   {$or:[{key1:value1},{key2:value2}]}	
		指定查询的条数	db.worker.find().limit(3)  查询前3条数据
		指定查询跳过条数后面的数据 db.work.find().skip(3) 查询3条以后的数据
		skip和limit联合使用可以实现分页

MongoDB 备份(mongodump)与恢复(mongorestore)
教程http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html
MongoDB数据备份
	mongodump命令脚本语法如下：
	mongodump -h dbhost -d dbname -o dbdirectory
		* -h：MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017
		* -d: 需要备份的数据库实例，例如：test
		* -o: 备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。
MongoDB数据恢复
	mongodb使用 mongorestore 命令来恢复备份的数据。
	mongorestore命令脚本语法如下：
	mongorestore -h <hostname><:port> -d dbname <path>
		* --host <:port>, -h <:port>：MongoDB所在服务器地址，默认为： localhost:27017
		* --db , -d ：需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2
		* --drop：恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！
		* <path>：mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\data\dump\test。你不能同时指定 <path> 和 --dir 选项，--dir也可以设置备份目录。
		* --dir：指定备份的目录.你不能同时指定 <path> 和 --dir 选项。
		实例:mongorestore -h localhost:27017 -d huanche-db d:\huanche-db
		