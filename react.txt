外部引入js文件网站www.bootcdn.cn
react相关库网站
https://ant.design/docs/react/introduce-cn
https://material-ui.com/
##一. 几个重要概念理解
  * 模块与组件
    * 模块:
      * 理解: 向外提供特定(局部)功能的js程序, 一般就是一个js文件
      * 为什么: js代码更多更复杂
      * 作用: 复用js, 简化js的编写, 提高js运行效率
    * 组件: 
      * 理解: 用来实现特定功能效果的代码集合(html/css/js)
      * 为什么: 一个界面的功能更复杂
      * 作用: 复用编码, 简化项目编码, 提高运行效率
  * 模块化与组件化
    * 模块化:
      * 当应用的js都以模块来编写的, 这个应用就是一个模块化的应用
    * 组件化:
      * 当应用是以多组件的方式实现功能, 这上应用就是一个组件化的应用
 ##二. ReactJS是什么?
  1. Facebook开源的一个js库
  2. 一个用于动态构建用户界面的js库
  3. React的特点
    * Declarative(声明式编码)
    * Component-Based(组件化编码)
    * Learn Once, Write Anywhere(支持客户端与服务器渲染)
    * 高效
    	* React高效的原因
		a). 虚拟(virtual)DOM, 不总是直接操作DOM
		b). 高效的DOM Diff算法, 最小化页面重绘	
    * 单向数据流
  4. ReactJS官网：http://facebook.github.io/react/
  5. Github地址：https://github.com/facebook/react

##三.ReactJS相关js库
  1相关库
    react.js: React的核心库
    react-dom.js: 提供操作DOM的扩展库
    babel.min.js: 解析JSX语法代码转为纯JS语法代码的库
  2在页面中导入js
    <script type="text/javascript" src="../js/react.js"></script>
    <script type="text/javascript" src="../js/react-dom.js"></script>
    <script type="text/javascript" src="../js/babel.min.js"></script>
  3编码
    <div id="example"></div>
    <script type="text/babel"> //必须用babel
      ReactDOM.render(<h1>Hello, React!</h1>, document.getElementById('example'));
    </script>
##三.JSX
  1.虚拟DOM
    1). React提供了一些API来创建一种 `特别` 的一般js对象
      * var element = React.createElement('h1', {id:'myTitle'}, 'hello');
      * let element = <h2>hello react</h2>
      * 上面创建的就是简单的虚拟DOM对象
    2). 虚拟DOM对象最终都会被React转换为真实的DOM
    3). 我们编码时基本只需要操作react的虚拟DOM相关数据, react会转换为真实DOM变化而更新界面
  2. JSX
    1). 全称: JavaScript XML
    2). react定义的一种类似于XML的JS扩展语法: XML+JS
    3). 作用: 用来创建react虚拟DOM(元素)对象
      * var ele = <h1>Hello JSX!</h1>;
      * 注意1: 它不是字符串, 也不是HTML/XML标签
      * 注意2: 它最终产生的就是一个JS对象
    4). 标签名任意: HTML标签或其它标签
    5). 标签属性任意: HTML标签属性或其它
    6). 基本语法规则
      * 遇到 <开头的代码, 以标签的语法解析: html同名标签转换为html同名元素, 其它标签需要特别解析
      * 遇到以 { 开头的代码，以JS的语法解析: 标签中的js代码必须用{}包含
    7). babel.js的作用
      * 浏览器的js引擎是不能直接解析JSX语法代码的, 需要babel转译为纯JS的代码才能运行
      * 只要用了JSX，都要加上type="text/babel", 声明需要babel来处理
  3. 渲染虚拟DOM(元素)
    1). 语法: ReactDOM.render(virtualDOM, containerDOM) :
    2). 作用: 将虚拟DOM元素渲染到真实容器DOM中显示
    3). 参数说明
      * 参数一: 纯js或jsx创建的虚拟dom对象
      * 参数二: 用来包含虚拟DOM元素的真实dom元素对象(一般是一个div)
  4. 创建虚拟DOM的2种方式:
    1). 纯JS(一般不用):
      React.createElement('h1', {id:'myTitle'}, title)
    2). JSX:
      <h1 id='myTitle'>{title}</h1>
      * 注意:
      * 标签必须有结束
      * 标签的class属性必须改为className属性
      * 标签的style属性值必须为: {{color:'red', width:12}}

##四.组件
  1. 自定义组件(Component) :
    1). 定义组件
      //方式1: 工厂(无状态)函数(最简洁, 推荐使用)
      function MyComponent1() {
        return <h1>自定义组件标题11111</h1>
      }
      //方式2: ES6类语法(复杂组件, 推荐使用)
      	* 首先会new这个MyComponent2类生成实例，然后由实例去调用render方法，最后在return中拿到虚拟DOM对象
      class MyComponent2 extends React.Component {
        render () {
          return <h1>自定义组件标题33333</h1>
        }
      }
      //方式3: ES5老语法(不推荐使用了)
      var MyComponent3 = React.createClass({
        render () {
          return <h1>自定义组件标题22222</h1>
        }
      })
    2). 渲染组件标签
      ReactDOM.render(<MyComponent/>, document.getElementById('example'));	
  2. 注意:
    1). 返回的组件类必须首字母大写
    2). 虚拟DOM元素必须只有一个根元素
    3). 虚拟DOM元素必须有结束标签
  3. ReactDOM.render()渲染组件标签的基本流程
    1). React内部会创建组件实例对象
    2). 得到包含的虚拟DOM并解析为真实DOM
    3). 插入到指定的页面元素内部

##五.三大属性
  1. props属性(主要作用：从组件外部向组件内部传递数据)
    1). 每个组件对象都会有props(properties的简写)属性
    2). 组件标签的所有属性都保存在props中
    3). 内部读取某个属性值: this.props.propertyName
    4). 作用: 通过标签属性从组件外向组件内传递数据(只读)
    5). 对props中的属性值进行类型限制和必要性限制
      Person.- = {
        name: React.PropTypes.string.isRequired,
        age: React.PropTypes.number.isRequired
	* 规定传入数据类型
	name: React.PropTypes.array,
	name: React.PropTypes.bool,
	name: React.PropTypes.func,
	name: React.PropTypes.object,
	name: React.PropTypes.symbol,
      }
      
    6). 扩展属性: 将对象的所有属性通过props传递
      <Person name = {person.name}/>
    7). 默认属性值
      Person.defaultProps = {
        name: 'Mary'
      };
    8). 组件类的构造函数
      constructor (props) {
        super(props); 
        console.log(props); // 查看所有属性
      }
  2. refs属性
    1). 组件内的标签都可以定义ref属性来标识自己
    2). 在组件中可以通过this.refs.refName来得到对应的真实DOM对象
    3). 作用: 用于操作指定的ref属性的dom元素对象(表单标签居多)
      * <input ref='username'>
      * this.refs.username //返回input对象
  3. state属性
    1). 组件被称为"状态机", 通过更新组件的状态值来更新对应的页面显示(重新渲染)
    2). 初始化状态:
      constructor (props) {
        super(props);
        this.state = {
          stateProp1 : value1,
          stateProp2 : value2
        };
      }
    3). 读取某个状态值
      this.state.stateProperty Name
    4). 更新状态---->组件界面更新
      //如果是自定义函数中调用this要去constructor修改this指向
      this.setState({
        stateProp1 : value1,
        stateProp2 : value2
      })
    5). 问题: 请区别一下组件的props和state属性?
      a. props只可读，state状态可以一直改变
      b. props组件外部传递进来的数据，state组件内部私有的数据
      自我理解，props的主要作用收接收外部传入数据到组件内部，<Person name = {person.name}/>
      而state更像是一个主组件的全局变量，来付初始值或者存储全局数据


##六.事件处理
  1. 通过onXxx属性指定组件的事件处理函数(注意大小写)
    * React使用的是自定义(合成)事件, 而不是使用的DOM事件
    * React中的事件是通过委托方式处理的(委托给组件最外层的元素)
  2. 通过event.target得到发生事件的DOM元素对象
    <input onFocus={this.handleClick}/>
    handleFocus(event) {
      event.target  //返回input对象
    }
##七.this
  1. 组件内置的方法中的this为组件对象
  2. 在组件中自定义的方法中的this为null
        * 强制绑定this
        * 箭头函数(ES6模块化编码时才能使用)
  3. 强制绑定this一般都写在
    constructor (props) { //constructor中的this表示组件实例对象
        super(props);
        this.handleClick = this.handleClick.bind(this) 
	//获取到原型链上的handleClick方法，并将其this修改为组件实例对象，然后返回修改this后的函数作为实例对象的属性保存。
    }

##八.受控组件
  1. React是一个单向数据流 
  2. 但可以自定义双向数据流组件(受控组件)
  class App extends React.Component{
      constructor (props){
          super (props);
          //初始化数据
          this.state = {
              guigu:'atguigu'
          }
          this.handleChange = this.handleChange.bind(this);
      }
      handleChange (enent) {
          var changeValue = enent.target.value;
          this.setState({
              guigu:changeValue
          })
      }
      render (){
          var guigu = this.state.guigu;
          return (
              <div>
                  <input onChange={this.handleChange} type="text" value={guigu} />
                  <p>{guigu}</p>
              </div>
          )
      }
  }
##九.生命周期
  1. 组件的三个生命周期状态:
    * Mount：插入真实 DOM
    * Update：被重新渲染
    * Unmount：被移出真实 DOM
  2. React 为每个状态都提供了两种勾子(hook)函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用
    * componentWillMount()
    * componentDidMount() : 已插入真实DOM, 在render之后才会执行
    * componentWillUpdate(object nextProps, object nextState)
    * componentDidUpdate(object prevProps, object prevState)
    * componentWillUnmount()
  3. 生命周期流程:
    1). 第一次初始化渲染显示: render()
      * constructor(): 创建对象初始化state
      * componentWillMount() : 组件将要被渲染(挂载)
      * render() : 用于插入虚拟DOM回调
      * componentDidMount() : 组件渲染完毕(挂载完毕)
    2). 每次更新state: this.setSate()
      * componentWillReceiveProps(nextProps){}  组件将要接受props数据或者是props数据发生变化的时候调用,nextProps为最新的props对象。
      * componentWillUpdate() : 组件将要更新
      * render() : 更新(重新渲染)
      * componentDidUpdate() : 组件更新完毕
    3). 删除组件
      * ReactDOM.unmountComponentAtNode(document.getElementById('example')) : 移除组件
      * componentWillUnmount() : 组件将要被卸载
  4.注意:
    * 一般会在componentDidMount()中: 开启监听, 发送ajax请求
    * 可以在componentWillUnmount()做一些收尾工作: 停止监听
    * 生命周期还有一个方法(后面需要时讲): componentWillReceiveProps
##十.webpack构建react应用入门
  1. 下载相关模块包
  * 创建package.json
  * react相关库
    npm install react react-dom --save
  * babel相关库
    npm install babel-core babel-preset-es2015 babel-preset-react --save-dev
  * webpack相关库
    npm install webpack babel-loader --save-dev
    npm install webpack-dev-server
  2. webpack配置文件: webpack.config.js
    const path = require('path'); //path内置的模块，用来设置路径。   
    module.exports = {
      entry: './src/main.js',   // 入口文件
      output: {                     // 输出配置
        filename: 'bundle.js',      // 输出文件名
	path: path.resolve(__dirname, 'dist')   //输出文件路径配置
      },
      module: {
        rules: [
          {
            test: /\.css$/,
            use: [
	      'style-loader',
	      'css-loader'
	    ]
	  },
	  //babel处理js
	  {
	    test: /\.js$/,
	    exclude: /node_modules/, //排除此文件夹
	    use: [
	      'babel-loader'
	    ]
	  }
	          
	]
      }    
    };
    3. babel配置文件: .babelrc
      {
	"presets": ["es2015", "react"]
      }
    4. 编码
      * src/js/App.js: 应用组件
	    import React from 'react'
	    export default function App() {  //暴露组件都得使用默认暴露
	      return <h1>Hello React Client Component</h1>
	    }
      * src/js/main.js: 入口js
	    import React from 'react'
	    import ReactDOM from 'react-dom'
	    import App from './App'
	    //渲染组件标签到页面元素
	    ReactDOM.render(<App />, document.getElementById('demo'))
    5. 下载css加载器
	    npm install style-loader css-loader --save-dev
	    创建css文件  src/css/test.css
	    body{
	        background : red
	    }
    6. 配置webpack-dev-server
    devServer:{
        contentBase: './',//内置服务器动态加载页面所在的目录
    }
    7. 执行命令
    构建任务：webpack
    热加载任务： webpack-dev-server
    8.package.json: 添加编译/运行脚本
	  "scripts": {
	    "start": "webpack-dev-server",
	    "build": "webpack"
	  }
##十一.react脚手架
  react脚手架
  * xxx脚手架: 用来帮助程序员快速创建一个基于xxx库的空项目的库
    * 包含了所有需要的配置
    * 指定好了所有的依赖
    * 可以直接安装/编译/运行一个简单效果
  * react提供了一个专门用于创建react项目的脚手架库: create-react-app
  * 项目的整体技术架构为: react + webpack + es6 + eslint
  1.安装
  npm install -g create-react-app
  2.生产框架
  create-react-app 项目框架名
  3.cd hello-react
  4.启动项目
  npm start
  5.使用
  npm run build
  后需要安装
  npm install serve -g
  然后执行
  serve -s build 可以矫正路径
##十二.事件订阅与发布 pubsub-js 库
  1.安装
  npm install pubsub-js
  2.引入
  import PubSub from 'pubsub-js'
  3.订阅
  PubSub.subscribe('myEvent',function(msg,data){})
    * myEvent 事件名称
    * msg 事件名称
    * data 发布，传实参传递的数据
  4.发布
  PubSub.publish('myEvent','hello world!')
    * myEvent 事件名称
    * hello world! 传递给订阅的数据
  PubSub.publishSync('myEvent','hello world!')
##十三.AJAX 
  * React没有ajax模块
	* 集成其它的js库(如axios/fetch/jQuery/), 发送ajax请求
	  * axios
	    * 封装XmlHttpRequest对象的ajax
	    * promise
	    * 可以用在浏览器端和服务器
	  * fetch
	    * 不再使用XmlHttpRequest对象提交ajax请求
	    * fetch就是用来提交ajax请求的函数, 只是新的浏览才内置了fetch
	    * 为了兼容低版本的浏览器, 可以引入fetch.js
	* 用哪个方法去发送ajax请求
	  * 只显示一次(请求一次): componentDidMount()
	  * 显示多次(请求多次): componentWillReceiveProps()

  - axios 库
  https://github.com/mzabriskie/axios
  1.安装
  npm install axios
  bower install axios 
  2.引入
  html 中直接scrip标签引入
  3.使用
  axios.get(url)
       .then(function(response){})
       .catch(function(err){})
  - Fetch 库
  https://github.github.io/fetch/
  https://segmentfault.com/a/1190000003810652
  1.安装
  npm install fetch
  2.使用
  fetch(url)
    .then(function(response) {
      return response.json();
    })
    .then(function(data) {
      console.log(data);
    })
    .catch(function(e) {
      console.log("Oops, error");
    });
##十四.React服务器端渲染入门
  * 理解
  * 当服务器端接收到请求时, 在服务器端基于React动态渲染页面, 并返回给浏览器显示
  * 相对于浏览器端渲染的好处?
    * 服务器端和客户端可以共享某些代码，避免重复定义。
    * 首次加载页面的速度加快
    * 便于SEO优化。服务器端渲染可以让搜索引擎更容易读取页面的meta信息以及其他SEO相关信息
  * 相对于浏览器端渲染的不好?
    * 对服务器的压力增大
    * 要求服务器使用基于node搭建
* 简单编码实现服务器端渲染
  * 应用文件结构
    ```
    react-node
      |-- src
          |-- App.js-----------------主组件js
          |-- server.js--------------启动服务器监听, 处理请求的js
      |-- index.js---------入口js
      |-- .babelrc---------babel配置文件
      |-- package.json-----应用包信息文件
    ```
  * 编码
    * package.json
      ```
      {
        "name": "react-node",
        "version": "1.0.0",
        "scripts": {
          "start": "node index"
        },
        "devDependencies": {
          "babel-preset-es2015": "^6.6.0",
          "babel-preset-react": "^6.5.0",
          "babel-register": "^6.8.0"
        },
        "dependencies": {
          "react": "^15.3.1",
          "react-dom": "^15.3.1"
        }
      }
      ```
    * .babelrc
      ```
      {
        "presets": ["react", "es2015"]
      }
      ```
    * App.js
      ```
      import React, {Component} from 'react'
      class App extends Component {
      
        render() {
          return (
            <div>测试React服务器</div>
          )
        }
      }
      export default App
      ```
    * server.js
      ```
      import React from 'react';
      import { renderToString } from 'react-dom/server';
      var http = require('http');
      import App from './App';
      
      //创建服务器对象, 并启动监听
      http.createServer(function (request, response) {
        //向浏览器端写头信息
        response.writeHead(200, {'Content-Type': 'text/html'});
        //渲染组件成标签结构字符串
        const appHTML = renderToString(<App />);
        //向浏览器返回结果
        response.end(appHTML);
      }).listen(8888);
      // 终端打印提示信息
      console.log('Server running at http://127.0.0.1:8888/');
      ```
    * index.js
      ```
      require('babel-register');
      require('./src/server.js');
      ```
  * 启动服务器运行:
    * 命令: npm start
    * 访问: http://127.0.0.1:8888
##十四.使用开源的ant-design库开发项目指南
  1. 最流行的开源React UI组件库
* material-ui(国外)
  * 官网: http://www.material-ui.com/#/
  * github: https://github.com/callemall/material-ui
* ant-design(国内蚂蚁金服)
  * 官网: https://ant.design/
  * github: https://github.com/ant-design/ant-design/

## 2. ant-design使用入门
### 使用create-react-app搭建react开发环境
	  ```
	  npm install create-react-app -g
	  create-react-app antd-demo
	  cd antd-demo
	  npm start
	  ```
### 搭建antd的基本开发环境
  * 下载
    ```
    npm install antd --save
    ```
  * src/App.js
	    
	    import React, { Component } from 'react';
	    import { Button } from 'antd';
	    import './App.css';
	    
	    class App extends Component {
	      render() {
	        return (
	          <div className="App">
	            <Button type="primary">Button</Button>
	          </div>
	        );
	      }
	    }
    
        export default App;
    
  * src/App.css
  
	    @import '~antd/dist/antd.css';
	    
	    .App {
	      text-align: center;
	    }
    
### 实现按需加载(css/js)
  * 使用 eject 命令将所有内建的配置暴露出来
    ```
    npm run eject
    ```
  * 下载babel-plugin-import(用于按需加载组件代码和样式的 babel 插件)
    ```
    npm install babel-plugin-import --save-dev
    ```
  * 修改配置: config/webpack.config.dev.js

	    // Process JS with Babel.
	    {
	      test: /\.(js|jsx)$/,
	      include: paths.appSrc,
	      loader: 'babel',
	      query: {
	    +   plugins: [
	    +     ['import', [{ libraryName: "antd", style: 'css' }]],
	    +   ],
	        // This is a feature of `babel-loader` for webpack (not Babel itself).
	        // It enables caching results in ./node_modules/.cache/babel-loader/
	        // directory for faster rebuilds.
	        cacheDirectory: true
	      }
	    },

  * 去除引入全量样式的语句: src/App.css
   
	    ```
	    @import '~antd/dist/antd.css'
	    ```
##十五.react-router使用教程
  ##0. 关于url中#的作用:
  * 学习: http://www.ruanyifeng.com/blog/2011/03/url_hash.html
  * '#'代表网页中的一个位置。其右面的字符，就是该位置的标识符
  * 改变#不触发网页重载
  * 改变#会改变浏览器的访问历史
  * window.location.hash读取#值
  * window.onhashchange = func 监听hash改变
##1. reat-router
  * github主页: https://github.com/ReactTraining/react-router
  * 官网教程: https://github.com/reactjs/react-router-tutorial/(官方教程)
  * 一峰教程: http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu
  * 安装路由组件
    npm install react-router@3 --save
##2. react-router库中的相关组件
  * 包含的相关组件: 
    * Router: 路由器组件, 用来包含各个路由组件
    * Route: 路由组件, 注册路由 
    * IndexRoute: 默认路由组件
    * hashHistory: 路由的切换由URL的hash变化决定，即URL的#部分发生变化
    * Link: 路由链接组件
  * Router: 路由器组件
    * 属性:  history={hashHistory} 用来监听浏览器地址栏的变化, 并将URL解析成一个地址对象，供React Router匹配
    * 子组件: Route
  * Route: 路由组件
    * 属性1: path="/xxx"  
    * 属性2: component={Xxx}
    * 根路由组件: path="/"的组件, 一般为App
    * 子路由组件: 子<Route>配置的组件
  * IndexRoute: 默认路由
    * 当父路由被请求时, 默认就会请求此路由组件
  * hashHistory
    * 用于Router组件的history属性
    * 作用: 为地址url生成?_k=hash, 用于内部保存对应的state
  * Link: 路由链接
    * 属性1: to="/xxx"
    * 属性2: activeClassName="active"

##3. 配置(从官方教程样例中拷贝)
	  * webpack配置: webpack.config.js
	    ```
	    module.exports = {
	      //入口js
	      entry: './index.js',
	      //编译打包输出
	      output: {
	        filename: 'bundle.js',
	        publicPath: ''
	      },
	    
	      module: {
	        //使用的loaders
	        loaders: [
	          {test: /\.js$/, exclude: /node_modules/, loader: 'babel-loader?presets[]=es2015&presets[]=react'}
	        ]
	      }
	    }
	    ```
    
	  * 包配置: package.json
	    ```
	    {
	      "name": "tutorial",
	      "version": "1.0.0",
	      "description": "",
	      "main": "index.js",
	      "scripts": {
	        "start": "webpack-dev-server --inline --content-base ."
	      },
	      "author": "",
	      "license": "ISC",
	      "dependencies": {
	        "react": "^0.14.7",
	        "react-dom": "^0.14.7",
	        "react-router": "^2.0.0"
	      },
	      "devDependencies": {
	        "babel-core": "^6.5.1",
	        "babel-loader": "^6.2.2",
	        "babel-preset-es2015": "^6.5.0",
	        "babel-preset-react": "^6.5.0",
	        "http-server": "^0.8.5",
	        "webpack": "^1.12.13",
	        "webpack-dev-server": "^1.14.1"
	      }
	    }
	    ```
##4. 编码
	  * 定义各个路由组件
	    * About.js
	      ```
	      import React from 'react'
	      function About() {
	        return <div>About组件内容</div>
	      }
	      export default About
	      ```
	    * Home.js
	      ```
	      import React from 'react'
	      function Home() {
	        return <div>Home组件内容2</div>
	      }
	      export default Home
	      ```
	    * Repos.js
	      ```
	      import React, {Component} from 'react'
	      export default class Repos extends Component {
	        render() {
	          return (
	            <div>Repos组件</div>
	          )
	        }
	      }
	      ```
	  * 定义应用组件: App.js
	    ```
	    import React, {Component} from 'react'
	    import {Link} from 'react-router'
	    
	    export default class App extends Component {
	      render() {
	        return (
	          <div>
	            <h2>Hello, React Router!</h2>
	            <ul>
	              <li><Link to="/about" activeClassName="active">About2</Link></li>
	              <li><Link to="/repos" activeClassName="active">Repos2</Link></li>
	            </ul>
	            {this.props.children}
	          </div>
	        )
	      }
	    }
	    ```
	  * 定义入口JS: index.js-->渲染组件
	    ```
	    import React from 'react'
	    import {render} from 'react-dom'
	    import {Router, Route, IndexRoute, hashHistory} from 'react-router'
	    import App from './modules/App'
	    import About from './modules/About'
	    import Repos from './modules/Repos'
	    import Home from './modules/Home'
	    
	    render((
	      <Router history={hashHistory}>
	        <Route path="/" component={App}>
	          <IndexRoute component={Home}/>
	          <Route path="/about" component={About}></Route>
	          <Route path="/repos" component={Repos}></Route>
	        </Route>
	      </Router>
	    ), document.getElementById('app'))
	    ```
	  * 主页面: index.html
	    ```
	    <style>
	      .active {
	        color: red;
	      }
	    </style>
	    <div id=app></div>
	    <script src="bundle.js"></script>
	    ```
##5. 传递请求参数
	  * repo.js: repos组件下的分路由组件
	    ```
	    import React from 'react'
	    export default function ({params}) {
	      let {username, repoName} = params
	      return (
	        <div>用户名:{username}, 仓库名:{repoName}</div>
	      )
	    }
	    ```
	  * repos.js
	    ```
	    import React from 'react'
	    import NavLink from './NavLink'
	    
	    export default class Repos extends React.Component {
	    
	      constructor(props) {
	        super(props);
	        this.state = {
	          repos: [
	            {username: 'faceback', repoName: 'react'},
	            {username: 'faceback', repoName: 'react-router'},
	            {username: 'Angular', repoName: 'angular'},
	            {username: 'Angular', repoName: 'angular-cli'}
	          ]
	        };
	        this.handleSubmit = this.handleSubmit.bind(this)
	      }
	    
	      handleSubmit () {
	    
	        const repos = this.state.repos
	        repos.push({
	          username: this.refs.username.value,
	          repoName: this.refs.repoName.value
	        })
	        this.setState({repos})
	        this.refs.username.value = ''
	        this.refs.repoName.value = ''
	      }
	    
	      render() {
	        return (
	          <div>
	            <h2>Repos</h2>
	            <ul>
	              {
	                this.state.repos.map((repo, index) => {
	                  const to = `/repos/${repo.username}/${repo.repoName}`
	                  return (
	                    <li key={index}>
	                      <Link to={to} activeClassName='active'>{repo.repoName}</Link>
	                    </li>
	                  )
	                })
	              }
	              <li>
	                <form onSubmit={this.handleSubmit}>
	                  <input type="text" placeholder="用户名" ref='username'/> / {' '}
	                  <input type="text" placeholder="仓库名" ref='repoName'/>{' '}
	                  <button type="submit">添加</button>
	                </form>
	              </li>
	            </ul>
	            {this.props.children}
	          </div>
	        );
	      }
	    }
	    ```
	  * index.js: 配置路由
	    ```
	    <Route path="/repos" component={Repos}>
	      <Route path="/repos/:username/:repoName" component={Repo}/>
	    </Route>
	    ```
	6. 优化Link组件
	  * NavLink.js
	    ```
	    import React from 'react'
	    import {Link} from 'react-router'
	    export default function NavLink(props) {
	      return <Link {...props} activeClassName="active"/>
	    }
	    ```
	  * Repos.js
	    ```
	    <NavLink to={to}>{repo.repoName}</NavLink>
	    ```
