https://developers.weixin.qq.com/miniprogram/dev/api/ 微信小程序API文档
https://yq.aliyun.com/articles/53393 promise  Q 教程
##数据绑定
  * 数据绑定使用 Mustache 语法（双大括号）将变量包起来，可以作用于：
  * <view> {{ message }} </view>
  * Page({
      data: {
        message: 'Hello MINA!'
      }
    })
##数据更新
    this.setData({
      message: 'Hello MINA1!'
    })
##列表渲染
- 默认index和item
<view wx:for="{{array}}">
  {{index}}: {{item.message}}
</view>

- 修改
<view wx:for="{{array}}" wx:for-index="idx" wx:for-item="itemName">
  {{idx}}: {{itemName.message}}
</view>

- wx:key
wx:key 的值以两种形式提供
1.字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。
2.保留关键字 *this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字，如：

##条件渲染
<view wx:if="{{length > 5}}"> 1 </view>
<view wx:elif="{{length > 2}}"> 2 </view>
<view wx:else> 3 </view>
注意： <block/> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。
<view hidden="{{flag ? true : false}}"> Hidden </view>
- wx:if vs hidden
* 因为 wx:if 之中的模板也可能包含数据绑定，所有当 wx:if 的条件值切换时，框架有一个局部渲染的过程，因为它会确保条件块在切换时销毁或重新渲染。
* 同时 wx:if 也是惰性的，如果在初始渲染条件为 false，框架什么也不做，在条件第一次变成真的时候才开始局部渲染。
* 相比之下，hidden 就简单的多，组件始终会被渲染，只是简单的控制显示与隐藏。
* 一般来说，wx:if 有更高的切换消耗而 hidden 有更高的初始渲染消耗。因此，如果需要频繁切换的情景下，用 hidden 更好，如果在运行时条件不大可能改变则 wx:if 较好。

##模板
1.通过include引入整个模板文件
<include src="../template/tem1" />
2.通过import导入模板文件后通过template is选择模板
<import src="../template/tem2" />
<template is="msgItem" data="{{title:'模板块第2种方式'}}"/>
  * msgItem为模板的名字要对应定义模板的时候的name属性
  * data为传递给模板的数据

##事件绑定和冒泡
- 事件分为冒泡事件和非冒泡事件：
1. 冒泡事件：当一个组件上的事件被触发后，该事件会向父节点传递。
2. 非冒泡事件：当一个组件上的事件被触发后，该事件不会向父节点传递。
  * 常见的冒泡事件
    touchstart	手指触摸动作开始	
    touchmove	手指触摸后移动	
    touchcancel	手指触摸动作被打断，如来电提醒，弹窗	
    touchend	手指触摸动作结束	
    tap	        手指触摸后马上离开	
    longpress	手指触摸后，超过350ms再离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发	1.5.0
    longtap	手指触摸后，超过350ms再离开（推荐使用longpress事件代替）
  * 非冒泡事件
    其他组件自定义事件如无特殊声明都是非冒泡事件，如<form/>的submit事件，<input/>的input事件，<scroll-view/>的scroll事件，(详见各个组件)

* 事件绑定的写法同组件的属性，以 key、value 的形式。
* key 以bind或catch开头，然后跟上事件的类型，如bindtap、catchtouchstart。自基础库版本 1.5.0 起，bind和catch后可以紧跟一个冒号，其含义不变，如bind:tap、、catch:touchstart。
* value 是一个字符串，需要在对应的 Page 中定义同名的函数。不然当触发事件的时候会报错。
* bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡。
  - 事件对象evevt
  属性
  * currentTarget 绑定事件的组件
    * id	String	当前组件的id
    * tagName	String	当前组件的类型
    * dataset	Object	当前组件上由data-开头的自定义属性组成的集合
      * 可以用<view data-title:"新闻标题" data-id:"100"></view> 给dataset中添加自定义数据
      * event.currentTarget.dataset中获取
      注意:
      例如:<view data-alpha-beta="1" data-alphaBeta="2" bindtap="bindViewTap"> DataSet Test </view>
      *  event.currentTarget.dataset.alphaBeta === 1 // - 会转为驼峰写法
      *  event.currentTarget.dataset.alphabeta === 2 // 大写会转为小写
  * target 触发事件的组件
    * id	String	当前组件的id
    * tagName	String	当前组件的类型
    * dataset	Object	当前组件上由data-开头的自定义属性组成的集合
  * type 事件的类型
  * timeStamp 事件生成时的时间戳，页面打开到触发事件所经过的毫秒数。
  * detail  CustomEvent 自定义事件对象属性列表（继承 BaseEvent）
    * x  点击事件的detail 带有的 x, y 同 pageX, pageY 代表距离文档左上角的距离。
    * y  点击事件的detail 带有的 x, y 同 pageX, pageY 代表距离文档左上角的距离。
  * TouchEvent 触摸事件对象属性列表（继承 BaseEvent）：
  * touches  	Array	触摸事件，当前停留在屏幕中的触摸点信息的数组
  * changedTouches   Array	触摸事件，当前变化的触摸点信息的数组
    * touches和changedTouches
    * identifier	Number	触摸点的标识符
    * pageX, pageY	Number	距离文档左上角的距离，文档的左上角为原点 ，横向为X轴，纵向为Y轴
    * clientX, clientY	Number	距离页面可显示区域（屏幕除去导航条）左上角距离，横向为X轴，纵向为Y轴

##生命周期
- App(object)
  * 不要在定义于 App() 内的函数中调用 getApp() ，使用 this 就可以拿到 app 实例。
  * 不要在 onLaunch 的时候调用 getCurrentPages()，此时 page 还没有生成。
  * App() 函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。
    * onLaunch	Function(options)	生命周期函数--监听小程序初始化	当小程序初始化完成时，会触发 onLaunch（全局只触发一次）
    * onShow	Function(options)	生命周期函数--监听小程序显示	当小程序启动，或从后台进入前台显示，会触发 onShow
      * onLaunch, onShow 参数
      * path	String	打开小程序的路径
      * query	Object	打开小程序的query
      * scene	Number	打开小程序的场景值
        * 以下场景支持返回 referrerInfo.appId：
	* 1020	公众号 profile 页相关小程序列表	返回来源公众号 appId
	* 1035	公众号自定义菜单	返回来源公众号 appId
	* 1036	App 分享消息卡片	返回来源应用 appId
	* 1037	小程序打开小程序	返回来源小程序 appId
	* 1038	从另一个小程序返回	返回来源小程序 appId
	* 1043	公众号模板消息	返回来源公众号 appId
      * shareTicket	String	shareTicket，详见 获取更多转发信息
      * referrerInfo	Object	当场景为由从另一个小程序或公众号或App打开时，返回此字段
      * referrerInfo.appId	String	来源小程序或公众号或App的 appId，详见下方说明
      * referrerInfo.extraData	Object	来源小程序传过来的数据，scene=1037或1038时支持
    * onHide	Function	生命周期函数--监听小程序隐藏	当小程序从前台进入后台，会触发 onHide
    * onError	Function	错误监听函数	当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息
    * onPageNotFound	Function	页面不存在监听函数	当小程序出现要打开的页面不存在的情况，会带上页面信息回调该函数，详见下文
      * 当要打开的页面并不存在时，会回调这个监听器，并带上以下信息：
      * path	String	不存在页面的路径
      * query	Object	打开不存在页面的 query
      * isEntryPage	Boolean	是否本次启动的首个页面（例如从分享等入口进来，首个页面是开发者配置的分享页面）
      * 开发者可以在 onPageNotFound 回调中进行重定向处理，但必须在回调中同步处理，异步处理（例如 setTimeout 异步执行）无效。
    * 其他	Any		开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问

- Page(object)
  * Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。
    * object 参数说明：
    * data	Object	页面的初始数据
    * onLoad	Function(Object)	生命周期函数--监听页面加载
      * 一个页面只会调用一次，可以在 onLoad 中获取打开当前页面所调用的 query 参数。
      * Object	其他页面打开当前页面所调用的 query 参数
    * onReady	Function	生命周期函数--监听页面初次渲染完成
      * 一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。
      * 对界面的设置如wx.setNavigationBarTitle请在onReady之后设置。详见生命周期
    * onShow	Function	生命周期函数--监听页面显示
      * 每次打开页面都会调用一次。
    * onHide	Function	生命周期函数--监听页面隐藏
      * 当navigateTo或底部tab切换时调用。
    * onUnload	Function	生命周期函数--监听页面卸载
      * 当redirectTo或navigateBack的时候调用。
    * onPullDownRefresh	Function	页面相关事件处理函数--监听用户下拉动作
      * 需要在app.json的window选项中或页面配置中开启enablePullDownRefresh。
      * 当处理完数据刷新后，wx.stopPullDownRefresh可以停止当前页面的下拉刷新。
    * onReachBottom	Function	页面上拉触底事件的处理函数
      * 可以在app.json的window选项中或页面配置中设置触发距离onReachBottomDistance。
      * 在触发距离内滑动期间，本事件只会被触发一次。
    * onShareAppMessage	Function	用户点击右上角转发
      * 只有定义了此事件处理函数，右上角菜单才会显示“转发”按钮
      * 此事件需要 return 一个 Object，用于自定义转发内容
        * 自定义转发字段
	* title	转发标题	当前小程序名称
	* path	转发路径	当前页面 path ，必须是以 / 开头的完整路径
    * onPageScroll	Function(Object)	页面滚动触发事件的处理函数
      * scrollTop	Number	页面在垂直方向已滚动的距离（单位px）
    * onTabItemTap	Function	当前是 tab 页时，点击 tab 时触发
    * 其他	Any	开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问
 
  * Page()原型链上的一些方法
    * Page.prototype.route  route 字段可以获取到当前页面的路径。
    * Page.prototype.setData(data,callback)  setData 函数用于将数据从逻辑层发送到视图层（异步），同时改变对应的 this.data 的值（同步）。
      * data	Object	是	这次要改变的数据
        *  key 可以非常灵活，以数据路径的形式给出，如 array[2].message，a.b.c.d，并且不需要在 this.data 中预先定义。
      * callback	Function	否	回调函数,在这次setData对界面渲染完毕后调用。
      注意：
      1. 直接修改 this.data 而不调用 this.setData 是无法改变页面的状态的，还会造成数据不一致。
      2. 仅支持设置可 JSON 化的数据。
      3. 单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据。
      4. 请不要把 data 中任何一项的 value 设为 undefined ，否则这一项将不被设置并可能遗留一些潜在问题。


##导航 跳转
- wx.navigateTo(OBJECT)
  * 保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面。
    * OBJECT 参数说明：
    * url	String	必填	需要跳转的应用内非 tabBar 的页面的路径 , 路径后可以带参数。参数与路径之间使用?分隔，参数键与参数值用=相连，不同参数用&分隔；如 'path?key=value&key2=value2'
    * success	Function	否	接口调用成功的回调函数
    * fail	Function	否	接口调用失败的回调函数
    * complete	Function	否	接口调用结束的回调函数（调用成功、失败都会执行）
- wx.redirectTo(OBJECT)
  * 关闭当前页面，跳转到应用内的某个页面。
    * OBJECT 参数说明：
    同上wx.navigateTo(OBJECT)
- wx.reLaunch(OBJECT)
  * 关闭所有页面，打开到应用内的某个页面。
    * OBJECT 参数说明：
    * url	String	是	需要跳转的应用内页面路径 , 路径后可以带参数。参数与路径之间使用?分隔，参数键与参数值用=相连，不同参数用&分隔；如 'path?key=value&key2=value2'，如果跳转的页面路径是 tabBar 页面则不能带参数
    同上wx.navigateTo(OBJECT)
- wx.switchTab(OBJECT)
  * 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面
    * OBJECT 参数说明：
    * url	String	是	需要跳转的 tabBar 页面的路径（需在 app.json 的 tabBar 字段定义的页面），路径后不能带参数
    同上wx.navigateTo(OBJECT)
- wx.navigateBack(OBJECT)
  * 关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages()) 获取当前的页面栈，决定需要返回几层。
    * OBJECT 参数说明：
    * delta	Number	1	返回的页面数，如果 delta 大于现有页面数，则返回到首页。
- 3种跳转页面的一些区别
  ①tabBar定义的导航
  ②wx.navigateTo(OBJECT)
  * 保留当前页面，当跳转到新页面的时候触发当前页面的onHide生命周期函数,当返回页面的时候触发onShow生命周期函数
  ③wx.redirectTo(OBJECT)
  * 关闭当前页面，会触发当前页面的onUnload生命周期函数,不可使用返回
  * 当跳转到新页面的时候，新页面的生命周期函数会onLoad onShow onReady 依次触发。
- <navigator>组件
  * 属性
  * target	String		在哪个目标上发生跳转，默认当前小程序
  * url	String		当前小程序内的跳转链接
  * open-type	String	navigate	跳转方式
    * navigate	对应 wx.navigateTo 或 wx.navigateToMiniProgram 的功能
    * redirect	对应 wx.redirectTo 的功能
    * switchTab	对应 wx.switchTab 的功能
    * reLaunch	对应 wx.reLaunch 的功能
    * navigateBack	对应 wx.navigateBack 的功能
    * exit	退出小程序，target="miniProgram"时生效
  * delta	Number		当 open-type 为 'navigateBack' 时有效，表示回退的层数
  * app-id	String		当target="miniProgram"时有效，要打开的小程序 appId
  * path	String		当target="miniProgram"时有效，打开的页面路径，如果为空则打开首页
  * extra-data	Object		当target="miniProgram"时有效，需要传递给目标小程序的数据，目标小程序可在 App.onLaunch()，App.onShow() 中获取到这份数据。
  * version	version	release	当target="miniProgram"时有效，要打开的小程序版本，有效值 develop（开发版），trial（体验版），release（正式版），仅在当前小程序为开发版或体验版时此参数有效；如果当前小程序是正式版，则打开的小程序必定是正式版。
  * hover-class	String	navigator-hover	指定点击时的样式类，当hover-class="none"时，没有点击态效果
  * hover-stop-propagation	Boolean	false	指定是否阻止本节点的祖先节点出现点击态
  * hover-start-time	Number	50	按住后多久出现点击态，单位毫秒
  * hover-stay-time	Number	600	手指松开后点击态保留时间，单位毫秒
  例子: <navigator url="../../redirect/redirect/redirect?title=redirect" open-type="redirect" hover-class="other-navigator-hover">在当前页打开</navigator>

- 页面跳转数据传递的方式
  * 方式一：通过调用上述的API并且在URL中传递参数的形式
    传递:wx.navigateTo(url:"../logs/logs?title=标题")
    获取:在对应的页面的JS文件中的onLoad生命周期函数中
    onLoad:function(options){console.log(options.title)} 中可以获取到
  * 方式二：通过组件<navigator></navigator>
    传递:<navigator url="../logs/logs?title=标题">跳转到新页面</navigator>
    获取方式一样

##页面布局
- flex布局
  * http://www.runoob.com/w3cnote/flex-grammar.html  菜鸟图文教程
  * Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。
  * 开启flex布局
    * 在父元素(容器上)设置
    .box{
      display: flex;
      display: inline-flex; //行内元素也可以使用Flex布局。
      display: -webkit-flex; /* Safari */Webkit内核的浏览器，必须加上-webkit前缀。
    }
  * flex容器属性详解
    * flex-direction 决定元素的排列方向
      * flex-direction: row | row-reverse | column | column-reverse;
      * row（默认值）：主轴为水平方向，起点在左端。
      * row-reverse：主轴为水平方向，起点在右端。
      * column：主轴为垂直方向，起点在上沿。
      * column-reverse：主轴为垂直方向，起点在下沿。
    * flex-wrap决定元素如何换行(排列不下时)
      * flex-wrap: nowrap | wrap | wrap-reverse;
      * nowrap（默认）：不换行。
      * wrap：换行，第一行在上方。
      * wrap-reverse：换行，第一行在下方。
    * flex-flow  为flex-direction和flex-wrap的简写
      * flex-flow: row nowrap; (默认) 
    * justify-content 元素在主轴上的对齐方式
      * justify-content: flex-start | flex-end | center | space-between | space-around;
      * flex-start（默认值）：左对齐
      * flex-end：右对齐
      * center： 居中
      * space-between：两端对齐，项目之间的间隔都相等。
      * space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。
    * align-items 元素在交叉轴的对齐方式.flr
      * align-items: flex-start | flex-end | center | baseline | stretch;
      * flex-start：交叉轴的起点对齐。
      * flex-end：交叉轴的终点对齐。
      * center：交叉轴的中点对齐。
      * baseline: 项目的第一行文字的基线对齐。
      * stretch（默认值）：如果元素未设置高度或设为auto，将占满整个容器的高度。
    * align-content
      * align-content: flex-start | flex-end | center | space-between | space-around | stretch;
      * flex-start：与交叉轴的起点对齐。
      * flex-end：与交叉轴的终点对齐。
      * center：与交叉轴的中点对齐。
      * space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
      * space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
      * stretch（默认值）：轴线占满整个交叉轴。
  * flex元素属性详解
    * flex-grow当有多余空间时,元素的放大比例,默认为0，即如果存在剩余空间，也不放大。
      *  flex-grow: <number>; /* 默认 0 */
      * 如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。
    * flex-shrink 当空间不足时，元素的缩小比例,默认为1，即如果空间不足，该项目将缩小。
      * flex-shrink: <number>; /* 默认 1 */
      * 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效。
    * flex-basis元素在主轴上占据的空间,项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。
      * flex-basis: <length> | auto; /* 默认 auto */
      * 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。
    * flex为flex-grow、flex-shrink、flex-basis的简写
      * flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。
      * 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。
    * order定义元素的排列顺序,数值越小，排列越靠前，默认为0。
      * order: <integer>;
    * align-self定义元素自身的对齐方式
      * align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。
      * align-self: auto | flex-start | flex-end | center | baseline | stretch;

- 相对定位和绝对定位
  理解:
  * 相对定位的元素是相对自身进行定位,参照物是自己。
  * 绝对定位的元素是相对离它最近的一个已定位的父级元素进行定位。
  
  ##操作反馈组件
  https://www.jb51.net/article/96878.htm 教程
  - action-sheet
    * 属性              类型         默认值     说明
    * hidden	        Boolean	     true	是否隐藏
    * bindchange	EventHandle	 	点击背景或action-sheet-cancel按钮时触发change事件，不携带数据
    
    action-sheet-item   底部菜单表的子选项。
    action-sheet-cancel 底部菜单表的取消按钮，和action-sheet-item的区别是，点击它会触发action-sheet的change事件，并且外观上会同它上面的内容间隔开来。
    实例
    <button type="default" bindtap="actionSheetTap">弹出action sheet</button>
    <action-sheet hidden="{{actionSheetHidden}}" bindchange="actionSheetChange">
      <action-sheet-item bindtap="actionSheetItem" data-name="item1">item1</action-sheet-item>  //可以通过该点击事件和data-name注册的信息来获取用户点击了该值
    <action-sheet-cancel>取消</action-sheet-cancel>
    </action-sheet>

- modal  对话弹窗
  * 属性名	    类型	默认值	说明
  * title	    String	 	标题
  * hidden	    Boolean	false	是否隐藏整个弹窗
  * no-cancel	    Boolean	false	是否隐藏cancel按钮
  * confirm-text    String	确定	confirm按钮文字
  * cancel-text	    String	取消	cancel按钮文字
  * bindconfirm	    EventHandle	 	点击确认触发的回调
  * bindcancel	    EventHandle	 	点击取消以及蒙层触发的回调
  示例：
  <modal title="标题" confirm-text="confirm" cancel-text="cancel" hidden="{{modalHidden}}" bindconfirm="modalChange" bindcancel="modalChange">
 这是对话框的内容。
  </modal>

- toast  ​消息提示框
  * 属性名	    类型	默认值	说明
  * duration	    Float	1500	hidden设置false后，触发bindchange的延时，单位毫秒
  * hidden	    Boolean	false	是否隐藏
  * bindchange	    EventHandle	 	duration延时后触发
  
  示例代码：
  <view class="body-view">
    <toast hidden="{{toast1Hidden}}" bindchange="toast1Change">
    默认
    </toast>
    <button type="default" bindtap="toast1Tap">点击弹出默认toast</button>
  </view>

- loading
  * 属性名	类型	默认值	说明
  * hidden	Boolean	false	是否隐藏
  
  示例代码：
  <view class="body-view">
     <loading hidden="{{hidden}}">
     加载中...
     </loading>
     <button type="default" bindtap="loadingTap">点击弹出loading</button>
  </view>
  * 注意loading打开后不会主动自己关闭，需要在自己的逻辑代码中，完成逻辑后手动关闭
